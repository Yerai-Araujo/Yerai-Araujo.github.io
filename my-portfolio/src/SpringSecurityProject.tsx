import { Link } from 'react-router-dom';
import './App.css';

const SpringSecurityProject = () => {
  return (
    <div className="content">
      <h1>Spring Security Project</h1>
      <div className="project-header">
        <h2>Project overview</h2>
        <a
          href="https://github.com/Yerai-Araujo/SpringSecurity_E-commerce"
          className="github-link"
          target="_blank"
          rel="noopener noreferrer"
        >
          View GitHub Repository
        </a>
      </div>
      <p>
        The project demonstrates how to implement authentication and authorization using Spring Security, ensuring secure access to resources.
        This project is about a restaurant where we can buy meals.  
        The goal of this project is to learn how to secure an application using Spring Security.  
        Spring Security help us write less code to achieve one of the most critical aspects of an application: security.
      </p>
      <h2>Project architecture</h2>
      <p>
        The application we are going to develop consists of simple functionalities, since the goal of this project is to develop  
        a secure application with Spring Security, therefore, it is mainly focused on functionalities related to the Spring Security framework.  
        The web application consists of a fast food restaurant with home delivery, you can select the products you want, and then make the payment of the order.  
        For persistence we use Spring Data JPA (Java Persistence API) which is a Spring Framework module that simplifies the interaction with relational databases.  
        It provides an abstraction layer over JPA to reduce the amount of repetitive code needed to perform CRUD (Create, Read, Update, Delete) operations.  
        It also uses MySql which is an open source relational database management system (RDBMS). It is used to store, manage and retrieve data  
        in a structured manner using SQL (Structured Query Language).  

        The application code is divided into the following packages:
        <ul>
          <li>
            <strong>config</strong>: Contains the configuration classes for Spring Security.
          </li>
          <li>
            <strong>controller</strong>: Contains the controller classes for the application.
          </li>
          <li>
            <strong>entity</strong>: Contains the entity classes for the application.
          </li>
          <li>
            <strong>repository</strong>: Contains the repository classes for the application.
          </li>
          <li>
            <strong>service</strong>: Contains the service classes for the application.
          </li>
          <li>
            <strong>web</strong>: Contains the web classes for the application.
          </li>
        </ul>
        The following image shows the Entity Relationship Diagram:
        <img src="/assets/images/ER_diagrama.PNG" alt="ER diagram" className="imgs"/>
        To implement the authentication process, a custom filter has been created to add the functionality to generate a JWT (JSON Web Token) and assign it  
        to the users that successfully authenticate.  
        For the authorization process, a second authorization filter has been added, which has also been customized to authorize users with JWT.  
        In addition, another way to authenticate has been added, the authentication has been delegated with OAuth2. Users with a GitHub account can authenticate  
        using their GitHub account credentials.  
        On the other hand, the authentication is two-factor, this implies that when the user correctly enters his credentials, he must also read a QR code and  
        enter the key generated by that QR.  
        Finally, an unofficial SSL certificate has been generated, with the aim of implementing HTTPS so that communication data is transferred encrypted.  
        HTTP requests will not be accepted on all application endpoints. <br />
        <br />
        The sequence diagram of placing an order:<br />  
        The following image shows the sequence diagram that a user follows to place an order in the application. The user first has to authenticate with  
        his credentials, once authenticated he will be redirected to the page that generates the QR code. On this page the user has to use Google Authenticator  
        to read the QR code, when the QR code is read the user will receive a six digit otp code that must be entered. If the code is valid he will be redirected  
        to the main page of the application, from this page he can go to the /design page to design a new order. The user chooses his order and is redirected  
        to the payment page, here the user confirms and pays for the order. The process of placing an order ends with a redirection to the main page,  
        so that new orders can be placed. <br />
        <img src="/assets/images/Diagrama_pedido.PNG" alt="Sequence diagram" className="imgs"/>
      </p>
      {/* Use Link for internal navigation */}
      <Link to="/" className="back-to-home-link">Back to Home</Link>
    </div>
  );
};

export default SpringSecurityProject;